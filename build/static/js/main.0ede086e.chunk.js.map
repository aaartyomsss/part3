{"version":3,"sources":["services/phones.js","App.js","serviceWorker.js","index.js"],"names":["notesUrl","axios","get","then","response","data","newPhone","post","id","newObj","put","delete","Notification","notification","style","border","borderRadius","fontSize","color","padding","margin","ErrorNotification","deleteItem","array","setPersons","window","confirm","filter","obj","nodeServices","console","log","catch","e","DisplayList","map","person","key","name","number","onClick","toLowerCase","includes","Filter","search","handleSearch","value","onChange","PersonForm","addName","newName","handleInputChange","newNumber","handleNumberChange","onSubmit","handleChange","type","SingleInput","App","useState","persons","setNewName","setNewNumber","setSearch","setNotification","errorNotification","setErrorNotification","useEffect","contacts","event","target","preventDefault","check","forEach","trim","find","urlId","changedPerson","setTimeout","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0ede086e.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst notesUrl = 'http://localhost:3001/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(notesUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst addPhone = newPhone => {\r\n    const request = axios.post(notesUrl, newPhone)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst updatePhone = (id, newObj) => {\r\n    return axios.put(`${notesUrl}/${id}`, newObj)\r\n}\r\n\r\nconst deletePhone = id => {\r\n    return axios.delete(`${notesUrl}/${id}`)\r\n}\r\n\r\nexport default {getAll, addPhone, updatePhone, deletePhone}","import React, { useState, useEffect } from 'react'\n\nimport nodeServices from './services/phones'\n\n// Notification\nconst Notification = ({ notification }) => {\n\n  const style = {\n    border: '3px solid green',\n    borderRadius: 5,\n    fontSize: 24,\n    color: 'green',\n    padding: 10,\n    margin: 10,\n\n  }\n\n  if (notification === null) {\n    return null\n  } else {\n    return (\n      <div style={style}>\n        {notification}\n      </div>\n    )\n  }\n}\n\n//Error Notification\nconst ErrorNotification = ({ notification }) => {\n\n  const style = {\n    border: '3px solid red',\n    borderRadius: 5,\n    fontSize: 24,\n    color: 'green',\n    padding: 10,\n    margin: 10,\n\n  }\n\n  if (notification === null) {\n    return null\n  } else {\n    return (\n      <div style={style}>\n        {notification}\n      </div>\n    )\n  }\n}\n\n\n// Deleting contact\nconst deleteItem = (id, array, setPersons) => {\n\n  let check = window.confirm('Are you sure that you want to delete this contact?')\n\n  if (check) {\n    setPersons(array.filter(obj => obj.id !== id))\n\n\n    nodeServices\n      .deletePhone(id)\n      .then(response => {\n        console.log(response)\n      }).catch(e => console.log(e))\n  }\n\n\n}\n\nconst DisplayList = ({ array, filter, setPersons }) => {\n\n\n\n  if (filter === '') {\n    return array.map(person => <li key={person.id}>{person.name} {person.number} <button onClick={() => deleteItem(person.id, array, setPersons)}>delete</button></li>)\n  } else {\n    const filtered = array.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n    return filtered.map(person => <li key={person.id}>{person.name} {person.number} <button onClick={() => deleteItem(person.id)}>delete</button></li>)\n  }\n}\n\nconst Filter = ({ search, handleSearch }) => {\n\n  return (\n    <div>\n      filter shown with <input value={search} onChange={handleSearch} />\n    </div>\n  )\n}\n\nconst PersonForm = ({ addName, newName, handleInputChange, newNumber, handleNumberChange }) => {\n\n  return (\n    <form onSubmit={addName}>\n      <SingleInput name={'Name: '} value={newName} handleChange={handleInputChange} />\n      <SingleInput name={'Number: '} value={newNumber} handleChange={handleNumberChange} />\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst SingleInput = ({ name, value, handleChange }) => {\n  return (\n    <div>\n      {name}: <input\n        value={value}\n        onChange={handleChange}\n      />\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [search, setSearch] = useState('')\n  const [notification, setNotification] = useState(null)\n  const [errorNotification, setErrorNotification] = useState(null)\n\n\n  //Getting initial data\n\n  useEffect(() => {\n    nodeServices\n      .getAll()\n      .then(contacts => setPersons(contacts))\n  }, [])\n\n\n  const addName = (event) => {\n    event.preventDefault()\n    let check = false\n\n    persons.forEach(person => {\n      if (person.name === newName.trim()) {\n        check = true\n      }\n    })\n    if (check === true) {\n      let proceed = window.confirm(`${newName.trim()} is already added to phonebook, replace old number with the old one?`)\n      if (proceed) {\n        const person = persons.find(obj => obj.name === newName.trim())\n        const urlId = person.id\n        const changedPerson = { ...person, number: newNumber }\n\n\n\n        nodeServices.updatePhone(urlId, changedPerson).then(response => {\n          setPersons(persons.map(person => person.id !== urlId ? person : response.data))\n          setNotification(`Updated ${changedPerson.name} number to ${changedPerson.number}`)\n          setTimeout(() => {\n            setNotification(null)\n          }, 3000)\n        }).catch(e => {\n          console.log(e)\n          setErrorNotification(`${changedPerson.name} was already deleted! Refresh the page, please`)\n          setTimeout(() => {\n            setErrorNotification(null)\n          }, 3000)\n        })\n\n        setNewNumber('')\n        setNewName('')\n\n      }\n    } else {\n      const person = {\n        name: newName.trim(),\n        number: newNumber,\n\n      }\n\n      setNotification(`Added ${person.name}`)\n      setTimeout(() => {\n        setNotification(null)\n      }, 3000)\n\n      nodeServices\n        .addPhone(person)\n        .then(contacts => {\n          setPersons(persons.concat(contacts))\n        }).catch(e => {\n          console.log(e)\n        })\n\n      setNewNumber('')\n      setNewName('')\n\n    }\n  }\n\n  // Handling input change\n\n  const handleInputChange = (event) => {\n\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification notification={notification} />\n      <ErrorNotification notification={errorNotification} />\n      <Filter search={search} handleSearch={handleSearch} />\n      <h2>Add a new</h2>\n      <PersonForm newName={newName} handleInputChange={handleInputChange} addName={addName} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n      <ul>\n        <DisplayList array={persons} filter={search} setPersons={setPersons} />\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}